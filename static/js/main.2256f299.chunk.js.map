{"version":3,"sources":["components/TitleInput/TitleInput.jsx","api/index.js","App.js","index.js","components/TitleInput/TitleInput.module.css","App.module.css"],"names":["TitleInput","props","className","styles","container","title","randomPageTitle","href","target","onSubmit","event","preventDefault","inputDataSubmit","action","type","placeholder","value","inputData","onChange","handleChange","autoFocus","url","pages","subCats","fetchPush","category","a","fetch","urlFetch","json","categorymembers","query","element","push","replace","newCat","console","log","newSubCat","randomSubCatIndex","Math","floor","random","length","randomSubCat","splice","randomPageIndex","randomPage","recommendedFunc","data","recomendedFetch","recommendedData","App","useState","setInputData","prevInputData","setPrevInputData","recommendedArr","setRecommendedArr","recomPressed","setRecomPressed","setRandomPage","useEffect","dataTransf","fetchedData","submitData","dataToFetch","e","recContainer","undefined","map","curr","index","key","recommendations","onClick","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.2256f299.chunk.js","sourcesContent":["import React from 'react';\nimport styles from './TitleInput.module.css';\n\nconst TitleInput = (props) => {\n  return (\n    <div className={styles.container}>\n    \n     {/* The word random could be substituted for the result and a new wikipedia page is provided and be a link that the person could press. */}\n      <h1 className={styles.title}>\n        { (props.randomPageTitle === \"Random\")\n        ? props.randomPageTitle + \" \"\n        : <a\n          href={\"https://en.wikipedia.org/wiki/\" + props.randomPageTitle}\n          className={styles.randomPageTitle}\n          target=\"_blank\"\n          >\n        {props.randomPageTitle + \" \"}\n        </a> }\n        WIKIPEDIA PAGE OF THE\n      </h1>\n      \n      {/* Have it focus on the input field when the page is loaded and everything being done with enter */}\n      \n      {/* See what else is required in the form if it is required at all */}\n      <form \n        onSubmit={ (event) => {\n          event.preventDefault();\n          props.inputDataSubmit();\n        } }\n        // action=\"javascript:void(0);\"\n      >\n        <input\n          action=\"\"\n          type=\"text\"\n          placeholder=\"\"\n          value={props.inputData}\n          onChange={props.handleChange} \n          autoFocus\n        />\n\n        {/* Have the button work with enter key press */}\n        {/* The button must be the problem, it must be refreshing the page or something and losing the states! */}\n        {/* <button\n          type=\"button\" \n          className={styles.searchButton}\n          onClick={props.inputDataSubmit}\n        >\n          <i className={styles.icon} class=\"fa fa-search\" aria-hidden=\"true\"></i>\n        </button> */}\n      </form>\n      <h1 className={styles.title}>\n        CATEGORY.\n      </h1>\n    </div>\n  )\n}\n\nexport default TitleInput;","// have it at 1 for level deep as standard.\n// Is it possible to have several levels deep without pulling several of them?Currently first fetch pulls pages and subcats. subsubcats would require 2 fetches for??\n\n// To do here:\n// If the picked subcat has no pages (probably only subcats) fetch a level deeper?  In total it's first Category Fetch, second SubCat fetch, and third random subCat fetch. For a new random it's simply 2 fetches. So not that many unless you're very unlucky.\n\n// Found an issue, the pages needs to reset after a new search is provided. This has likely seemed like a bug before when trying botany and then football \n\n\nlet url = \"\";\nlet pages = [];\nlet subCats = [];\n\n\nconst fetchPush = async (category) => {\n  const urlFetch = await fetch(url);\n  const { query: { categorymembers } } = await urlFetch.json();\n  \n  for await (const element of categorymembers) {\n    if (element.type === \"page\") {\n      pages.push(element.title\n        .replace(/[\" \"]/g, \"_\"));\n    } else {\n      subCats.push(element.title\n        .replace(/Category:/g, \"\")\n        .replace(/[\" \"]/g, \"_\"));\n    }\n  };\n  // Only to try and read elsewhere\n  // return categorymembers;\n}\n\n// Called when a new category is entered\nexport const newCat = async (category) => {\n\n  // Resetting for the new category.\n  pages = [];\n  subCats = [];\n\n  console.log(`newCat as been invoked`);\n\n  url = `https://en.wikipedia.org/w/api.php?action=query&list=categorymembers&cmtitle=Category:${category}&cmprop=title|type&format=json&cmlimit=500&cmtype=page|subcat&origin=*`;\n\n  await fetchPush(category);\n\n  return newSubCat();\n  \n};\n\n// Called when a category is already entered but user wants another result\nexport const newSubCat = async () => {\n  const randomSubCatIndex = Math.floor(Math.random() * subCats.length);\n  const randomSubCat = subCats[randomSubCatIndex];\n  // Removing the subCat so that it won't be re-picked.\n  subCats.splice(randomSubCatIndex, 1);\n  \n  // Global category doesn't seem to work so I am changing the url here.\n  url = `https://en.wikipedia.org/w/api.php?action=query&list=categorymembers&cmtitle=Category:${randomSubCat}&cmprop=title|type&format=json&cmlimit=500&cmtype=page&origin=*`;\n\n  await fetchPush();\n  \n  \n  // Random article in pages\n  const randomPageIndex = Math.floor(Math.random() * pages.length);\n  const randomPage = pages[randomPageIndex];\n  // Removing the article page so that it won't be re-picked\n  pages.splice(randomPageIndex, 1);\n  \n  \n  //Cannot get this to console.log, even though in fetchPush categorymembers in being returned, it simply says that it is not defined as if this console.log is running first. Maybe I still don't understand await. read the article in DEV.\n  // console.log(`categorymembers ${categorymembers}`);\n  console.log(`Random Page = ${randomPage}`);\n  \n  return randomPage\n    .replace(/[\"_\"]/g, \" \");\n};\n\n\n\n\n///////////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////////\n\n\n\nexport const recommendedFunc = async (data) => {\n  const recomendedFetch = await fetch(`https://en.wikipedia.org/w/api.php?action=opensearch&format=json&limit=6&namespace=14&suggest&search=${data}&origin=*`);\n  const recommendedData = await recomendedFetch.json(); // Can't seem to destructure it.\n  return recommendedData[1];\n};","import React, { useState, useEffect } from 'react';\n\nimport { TitleInput } from './components';\nimport styles from './App.module.css';\n\nimport { newCat, newSubCat, recommendedFunc } from './api';\n\nconst App = () => {\n\n  const [ inputData, setInputData ] = useState(\"\");\n  const [ prevInputData, setPrevInputData ] = useState(\"\");\n  const [ recommendedArr, setRecommendedArr ] = useState([]);\n  const [ recomPressed, setRecomPressed ] = useState(false);\n  const [ randomPage, setRandomPage ] = useState(\"Random\");\n\n  // useEffect is returning an array of recommended searches based on input and in return we are rendering that array with .map to create several recommendations in the form of buttons.\n  useEffect(() => {\n    const fetchedData = async () => {\n    const dataTransf = await recommendedFunc(inputData);\n    setRecommendedArr(dataTransf);\n  };\n    fetchedData();\n  }, [inputData]);\n  \n  useEffect( () => {\n    console.log(`inputData = ${inputData}, recomPressed = ${recomPressed}`);\n    if (recomPressed === true) {\n      submitData(inputData);\n    }\n    setRecomPressed(false);\n\n  }, [recomPressed === true]);\n\n  const submitData = async (dataToFetch) => {\n    let fetchedData = \"\";\n    if (dataToFetch !== \"\" && dataToFetch !== prevInputData) {\n      fetchedData = await newCat(dataToFetch.replace(/[\" \"]/g, \"_\"));\n      console.log(`fetched data inside first if statment = ${fetchedData}`)\n      setPrevInputData(dataToFetch);\n    } else if (dataToFetch !== \"\" && dataToFetch === prevInputData) {\n      fetchedData = await newSubCat(dataToFetch.replace(/[\" \"]/g, \"_\"));\n    }\n    setRandomPage(fetchedData);\n  }\n\n\n  return (\n    <div className={styles.container}>\n      <TitleInput\n        inputData={ inputData }\n        handleChange={ (e) => setInputData(e.target.value) } \n        inputDataSubmit={ () => submitData(inputData) }\n        randomPageTitle={ randomPage }\n      />\n      \n      \n      {/* CURRENTLY HERE! */}\n      \n      {/* https://reactgo.com/react-focus-input/\n      Need to set the focus after pressing the recommendations button, according to this I can invoke a function on the button click for it */}\n      \n      {/* To improve I can remove the B-Class and Uppercase the word after. Check the recommendations with B inputData */}\n      \n      \n      {/* https://stackoverflow.com/questions/54069253/usestate-set-method-not-reflecting-change-immediately\n      According to this it means that states are only updated after each render, in this case because the function is within another function meaning a closure the state is still undefined. The fix is to always use useEffect for these fetches, only not when we need to get another random result. But maybe even then it would work with if statments on the useEffect, I just cannot be updating states there for some reason. */}\n      \n      <div className={styles.recContainer}> \n        { /* ternary to not attempt to render the initial undefined value */\n        (recommendedArr !== undefined)\n          ? ( recommendedArr.map( (curr, index) => (\n              <button\n                key={index}\n                className={styles.recommendations}\n                type=\"button\"\n                onClick={\n                  async () => {\n                    await setInputData( curr.replace(/Category:/g, \"\"));\n                    setRecomPressed(true);\n                  }\n                }\n              >\n                {curr\n                  .replace(/Category:/g, \"\")\n                }\n              </button>\n            )) )\n          : null\n        }\n      </div>\n    </div>\n  );\n}\n\n\n// App done whilst following a youtube video regarding a different app done with React\n// Left off at ####\n// https://www.youtube.com/watch?v=khJlrj3Y6Ls\n// Compare with this one to understand\n// https://www.youtube.com/watch?v=U9T6YkEDkMo\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"TitleInput_container__3dgiA\",\"title\":\"TitleInput_title__3gK_J\",\"randomPageTitle\":\"TitleInput_randomPageTitle__3rebV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"recContainer\":\"App_recContainer__wWg8r\",\"recommendations\":\"App_recommendations__174uK\"};"],"sourceRoot":""}