{"version":3,"sources":["components/TitleInput/TitleInput.jsx","api/index.js","App.js","index.js","components/TitleInput/TitleInput.module.css","App.module.css"],"names":["TitleInput","props","componentToRenderTwo","href","randomPageTitle","className","styles","container","title","onSubmit","event","preventDefault","inputDataSubmit","action","type","placeholder","value","inputData","onChange","handleChange","autoFocus","ref","searchInput","recContainer","undefined","recommendedArr","map","curr","index","key","recommendations","onClick","a","setInputData","replace","setRecomPressed","handleFocus","url","pages","subCats","fetchPush","category","fetch","urlFetch","json","categorymembers","query","element","push","newCat","newSubCat","randomSubCatIndex","Math","floor","random","length","randomSubCat","splice","randomPageIndex","randomPage","recommendedFunc","data","recomendedFetch","recommendedData","App","useState","prevInputData","setPrevInputData","setRecommendedArr","recomPressed","setRandomPage","useEffect","dataTransf","fetchedData","submitData","dataToFetch","useRef","e","target","current","focus","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.cabbe8f5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styles from \"./TitleInput.module.css\";\r\n\r\nconst TitleInput = (props) => {\r\n  \r\n  // Enables me to use multiple elements in the ternary operator.\r\n  const componentToRenderTwo = (\r\n      <>\r\n            YOU HAVE THE linked {\" \"}\r\n          <a\r\n            href={\"https://en.wikipedia.org/wiki/\" + props.randomPageTitle}\r\n            className={styles.randomPageTitle}\r\n          >\r\n            {props.randomPageTitle}\r\n          </a>\r\n      </>);\r\n  \r\n  return (\r\n    <div className={styles.container}>\r\n      {/* Link needs to be more obvious. */}\r\n      \r\n      <h1 className={styles.title}>\r\n        WITHIN THE WIKIPEDIA CATEGORY OF\r\n      </h1>\r\n\r\n      <form\r\n        onSubmit={(event) => {\r\n          event.preventDefault();\r\n          props.inputDataSubmit();\r\n        }}\r\n      >\r\n        <input\r\n          action=\"\"\r\n          type=\"text\"\r\n          placeholder=\"\"\r\n          value={props.inputData}\r\n          onChange={props.handleChange}\r\n          autoFocus\r\n          ref={props.searchInput}\r\n        />\r\n      </form>\r\n      <h1 className={styles.title}>\r\n        {props.randomPageTitle === \"Random\" ? (\r\n          \"YOU WILL BE PROVIDED A \" + props.randomPageTitle + \" \"\r\n        ) : (\r\n          componentToRenderTwo\r\n        )}\r\n      {\" \"} ARTICLE.</h1>\r\n\r\n      {/* https://reactgo.com/react-focus-input/\r\n      Need to set the focus after pressing the recommendations button, according to this I can invoke a function on the button click for it */}\r\n\r\n      {/* To improve I can remove the B-Class and Uppercase the word after. Check the recommendations with B inputData */}\r\n\r\n      {/* https://stackoverflow.com/questions/54069253/usestate-set-method-not-reflecting-change-immediately\r\n      According to this it means that states are only updated after each render, in this case because the function is within another function meaning a closure the state is still undefined. The fix is to always use useEffect for these fetches, only not when we need to get another random result. But maybe even then it would work with if statments on the useEffect, I just cannot be updating states there for some reason. */}\r\n\r\n      <div className={styles.recContainer}>\r\n        {\r\n          /* ternary to not attempt to render the initial undefined value */\r\n          props.recommendedArr !== undefined\r\n            ? props.recommendedArr.map((curr, index) => (\r\n                <button\r\n                  key={index}\r\n                  className={styles.recommendations}\r\n                  type=\"button\"\r\n                  onClick={async () => {\r\n                    props.setInputData(curr.replace(/Category:/g, \"\"));\r\n                    props.setRecomPressed(true);\r\n                    props.handleFocus();\r\n                  }}\r\n                >\r\n                  {curr.replace(/Category:/g, \"\")}\r\n                </button>\r\n              ))\r\n            : null\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TitleInput;\r\n","// To do here:\r\n// If the picked subcat has no pages (probably only subcats) fetch a level deeper?  In total it's first Category Fetch, second SubCat fetch, and third random subCat fetch. For a new random it's simply 2 fetches. So not that many unless you're very unlucky.\r\n\r\nlet url = \"\";\r\nlet pages = [];\r\nlet subCats = [];\r\n\r\nconst fetchPush = async (category) => {\r\n  const urlFetch = await fetch(url);\r\n  const {\r\n    query: { categorymembers },\r\n  } = await urlFetch.json();\r\n\r\n  for await (const element of categorymembers) {\r\n    if (element.type === \"page\") {\r\n      pages.push(element.title.replace(/[\" \"]/g, \"_\"));\r\n    } else {\r\n      subCats.push(\r\n        element.title.replace(/Category:/g, \"\").replace(/[\" \"]/g, \"_\")\r\n      );\r\n    }\r\n  }\r\n};\r\n\r\n// Called when a new category is entered\r\nexport const newCat = async (category) => {\r\n  // Resetting for the new category.\r\n  pages = [];\r\n  subCats = [];\r\n\r\n  url = `https://en.wikipedia.org/w/api.php?action=query&list=categorymembers&cmtitle=Category:${category}&cmprop=title|type&format=json&cmlimit=500&cmtype=page|subcat&origin=*`;\r\n\r\n  await fetchPush(category);\r\n\r\n  return newSubCat();\r\n};\r\n\r\n// Called when a category is already entered but user wants another result\r\nexport const newSubCat = async () => {\r\n  const randomSubCatIndex = Math.floor(Math.random() * subCats.length);\r\n  const randomSubCat = subCats[randomSubCatIndex];\r\n  // Removing the subCat so that it won't be re-picked.\r\n  subCats.splice(randomSubCatIndex, 1);\r\n\r\n  // Global category doesn't seem to work so I am changing the url here.\r\n  url = `https://en.wikipedia.org/w/api.php?action=query&list=categorymembers&cmtitle=Category:${randomSubCat}&cmprop=title|type&format=json&cmlimit=500&cmtype=page&origin=*`;\r\n\r\n  await fetchPush();\r\n\r\n  // Random article in pages\r\n  const randomPageIndex = Math.floor(Math.random() * pages.length);\r\n  const randomPage = pages[randomPageIndex];\r\n  // Removing the article page so that it won't be re-picked\r\n  pages.splice(randomPageIndex, 1);\r\n\r\n  return randomPage.replace(/[\"_\"]/g, \" \");\r\n};\r\n\r\n///////////////////////////////////////////////////////////////////////\r\n///////////////////////////////////////////////////////////////////////\r\n\r\nexport const recommendedFunc = async (data) => {\r\n  const recomendedFetch = await fetch(\r\n    `https://en.wikipedia.org/w/api.php?action=opensearch&format=json&limit=6&namespace=14&suggest&search=${data}&origin=*`\r\n  );\r\n  const recommendedData = await recomendedFetch.json(); // Can't seem to destructure it.\r\n  return recommendedData[1];\r\n};\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\n\r\nimport { TitleInput } from \"./components\";\r\nimport styles from \"./App.module.css\";\r\n\r\nimport { newCat, newSubCat, recommendedFunc } from \"./api\";\r\n\r\nconst App = () => {\r\n  const [inputData, setInputData] = useState(\"\");\r\n  const [prevInputData, setPrevInputData] = useState(\"\");\r\n  const [recommendedArr, setRecommendedArr] = useState([]);\r\n  const [recomPressed, setRecomPressed] = useState(false);\r\n  const [randomPage, setRandomPage] = useState(\"Random\");\r\n\r\n  // useEffect is returning an array of recommended searches based on input and in return we are rendering that array with .map to create several recommendations in the form of buttons.\r\n  useEffect(() => {\r\n    const fetchedData = async () => {\r\n      const dataTransf = await recommendedFunc(inputData);\r\n      setRecommendedArr(dataTransf);\r\n    };\r\n    fetchedData();\r\n  }, [inputData]);\r\n\r\n  useEffect(() => {\r\n    if (recomPressed === true) {\r\n      submitData(inputData);\r\n    }\r\n    setRecomPressed(false);\r\n  }, [recomPressed === true]);\r\n\r\n  const submitData = async (dataToFetch) => {\r\n    let fetchedData = \"\";\r\n    if (dataToFetch !== \"\" && dataToFetch !== prevInputData) {\r\n      fetchedData = await newCat(dataToFetch.replace(/[\" \"]/g, \"_\"));\r\n      setPrevInputData(dataToFetch);\r\n    } else if (dataToFetch !== \"\" && dataToFetch === prevInputData) {\r\n      fetchedData = await newSubCat(dataToFetch.replace(/[\" \"]/g, \"_\"));\r\n    }\r\n    setRandomPage(fetchedData);\r\n  };\r\n\r\n  const searchInput = useRef(null);\r\n\r\n  const handleFocus = () => {\r\n    searchInput.current.focus();\r\n  };\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <TitleInput\r\n        inputData={inputData}\r\n        handleChange={(e) => setInputData(e.target.value)}\r\n        inputDataSubmit={() => submitData(inputData)}\r\n        randomPageTitle={randomPage}\r\n        recommendedArr={recommendedArr}\r\n        setInputData={setInputData}\r\n        setRecomPressed={setRecomPressed}\r\n        handleFocus={handleFocus}\r\n        searchInput={searchInput}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\n\r\n// Delete after\r\n// Done - Need to change the text to the planned one on evernote.\r\n// Done - Need to change the top margin when on the phone\r\n// Done - Need to change the bottom margin of the container where CATEGORY is, remove there and add to the recommendations container instead (mostly for the black bar at the moment)\r\n// Need to have a way to search the results without a subcategory,maybe for now use a secrect key. that calls a funtion with sub cats just to use on things like COnspiracy Theories.\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"TitleInput_container__1aLA0\",\"title\":\"TitleInput_title__20RCS\",\"randomPageTitle\":\"TitleInput_randomPageTitle__1O4I4\",\"recContainer\":\"TitleInput_recContainer__28zrl\",\"recommendations\":\"TitleInput_recommendations__2-dlN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3leJp\"};"],"sourceRoot":""}